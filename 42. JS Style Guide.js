//* JavaScript Style Guide
//  ใช้แบบแผนการเขียนโค้ดเดียวกันเสมอสำหรับโปรเจกต์ JavaScript ทั้งหมดของคุณ

//* JavaScript Coding Conventions
//  แบบแผนการเข้ารหัสเป็นแนวทางรูปแบบสำหรับการเขียนโปรแกรม โดยทั่วไปแล้วจะครอบคลุมถึง
//  กฎการตั้งชื่อและการประกาศตัวแปรและฟังก์ชัน
//  กฎการใช้ white space, indentation, comments.
//  หลักปฏิบัติและหลักการเขียนโปรแกรม

//  ข้อตกลงการเข้ารหัสคุณภาพที่ปลอดภัย
//  ปรับปรุงความสามารถในการอ่านโค้ด
//  ทำให้การบำรุงรักษาโค้ดง่ายขึ้น
//  แบบแผนการเขียนโค้ดสามารถเป็นกฎที่จัดทำเป็นเอกสารเพื่อให้ทีมปฏิบัติตาม หรือเป็นเพียงแนวปฏิบัติในการเขียนโค้ดของแต่ละคน

//* Variable Names
//  ที่ W3schools เราใช้ camelCase สำหรับชื่อตัวระบุ (variables and functions)
//  ชื่อทั้งหมดเริ่มต้นด้วยตัวอักษร
{
    firstName = "John";
    lastName = "Doe";
    
    price = 19.90;
    tax = 0.20;
    
    fullPrice = price + (price * tax);
}

//* Spaces Around Operators
//  ใส่ช่องว่างรอบ ๆ ตัวดำเนินการเสมอ ( = + - * / ) และหลังเครื่องหมายจุลภาค
{
    let x = y + z;
    const myArray = ["Volvo", "Saab", "Fiat"];
}

//* Code Indentation
//  ใช้ 2 ช่องว่างเสมอเพื่อเยื้องบล็อคโค้ด
{
    function toCelsius(fahrenheit) {
        return (5 / 9) * (fahrenheit - 32);
      }
    // การเยื้องคือบรรทัดที่ 40
}
// ห้ามใช้ tab (tabulators) ในการเยื้อง

//* Statement Rules
//  กฎทั่วไปสำหรับข้อความง่ายๆ
//  จบคำสั่งง่ายๆด้วยเครื่องหมายอัฒภาคเสมอ ;
{
    const cars = ["Volvo", "Saab", "Fiat"];

    const person = {
      firstName: "John",
      lastName: "Doe",
      age: 50,
      eyeColor: "blue"
    };
}

//  กฎทั่วไปสำหรับคำสั่งเชิงซ้อน (เชิงซ้อน)
{
    //  Functions
    //  ใส่วงเล็บเปิดที่ท้ายบรรทัดแรก {
    //  ใช้ช่องว่างหนึ่งช่องก่อนวงเล็บเปิด
    function toCelsius(fahrenheit) {
        return (5 / 9) * (fahrenheit - 32);
    }
    //  ใส่วงเล็บปิดในบรรทัดใหม่โดยไม่ต้องเว้นวรรคนำหน้า
    //  อย่าจบคำสั่งที่ซับซ้อนด้วยเครื่องหมายอัฒภาค

    //  Loops
    for (let i = 0; i < 5; i++) {
        x += i;
    }

    //  Conditionals เงื่อนไข
    if (time < 20) {
        greeting = "Good day";
    } else {
        greeting = "Good evening";
    }
}

//* Object Rules
//  กฎทั่วไปสำหรับคำจำกัดความของวัตถุ
{
    //  วางวงเล็บเปิดในบรรทัดเดียวกับชื่อวัตถุ
    const person = {
        //  ใช้โคลอนบวกหนึ่งช่องว่างระหว่างแต่ละคุณสมบัติและค่าของมัน
        //  ใช้เครื่องหมายอัญประกาศรอบค่าสตริง ไม่ใช่รอบค่าตัวเลข
        firstName: "John",
        lastName: "Doe",
        age: 50,
        eyeColor: "blue"
        //  อย่าใส่เครื่องหมายจุลภาคหลังคู่ค่าคุณสมบัติสุดท้าย
    };
    //  วางวงเล็บปิดในบรรทัดใหม่โดยไม่มีช่องว่างนำหน้า
    //  สิ้นสุดคำจำกัดความของวัตถุด้วยเครื่องหมายอัฒภาคเสมอ
}
//  ออบเจ็กต์ขนาดสั้นสามารถเขียนแบบบีบอัดในหนึ่งบรรทัด โดยใช้ช่องว่างระหว่างคุณสมบัติเท่านั้น
{
    const person = {firstName:"John", lastName:"Doe", age:50, eyeColor:"blue"};
}

//* Line Length < 80
//  เพื่อให้อ่านง่าย หลีกเลี่ยงบรรทัดที่ยาวเกิน 80 อักขระ

//* Naming Conventions
//  ใช้หลักการตั้งชื่อเดียวกันเสมอสำหรับโค้ดทั้งหมดของคุณ ตัวอย่างเช่น
//  ชื่อตัวแปรและฟังก์ชันเขียนเป็น camelCase
//  ตัวแปร Global เขียนด้วยตัวพิมพ์ใหญ่
//  ค่าคงที่ (เช่น PI) เขียนด้วยตัวพิมพ์ใหญ่

//* Underscores: _
//  โปรแกรมเมอร์หลายคนชอบใช้ขีดล่าง (date_of_birth) โดยเฉพาะในฐานข้อมูล SQL
//  เครื่องหมายขีดล่างมักใช้ในเอกสาร PHP

//* PascalCase:
//  PascalCase มักเป็นที่ต้องการของโปรแกรมเมอร์ C

//* camelCase:
//  camelCase ถูกใช้โดย JavaScript เอง, โดย jQuery และไลบรารี JavaScript อื่นๆ
//! ห้ามขึ้นต้นด้วยเครื่องหมาย $ มันจะทำให้คุณขัดแย้งกับชื่อไลบรารี JavaScript จำนวนมาก

//* Loading JavaScript in HTML
//  ใช้ไวยากรณ์อย่างง่ายสำหรับการโหลดสคริปต์ภายนอก (ไม่จำเป็นต้องใช้แอตทริบิวต์ประเภท)
{
    <script src="myscript.js"></script>
}

//* Accessing HTML Elements
//  ผลที่ตามมาของการใช้สไตล์ HTML ที่ "ไม่เรียบร้อย" อาจส่งผลให้เกิดข้อผิดพลาดของ JavaScript
//  คำสั่ง JavaScript ทั้งสองนี้จะให้ผลลัพธ์ที่แตกต่างกัน
{
    const obj1 = getElementById("Demo")

    const obj2 = getElementById("demo")
}
//  ถ้าเป็นไปได้ ให้ใช้หลักการตั้งชื่อเดียวกัน (เหมือนกับ JavaScript) ใน HTML

//* File Extensions นามสกุลไฟล์
//  HTML ใช้ .html หรือ .htm
//  CSS ใช้ .css
//  JavaScript ใช้ .js

//* Use Lower Case File Names

//* Performance
//  คอมพิวเตอร์ไม่ได้ใช้ข้อตกลงการเข้ารหัส กฎส่วนใหญ่มีผลกระทบเล็กน้อยต่อการดำเนินการของโปรแกรม
//  การเยื้องและช่องว่างเพิ่มเติมไม่สำคัญในสคริปต์ขนาดเล็ก
//  สำหรับโค้ดที่กำลังพัฒนา ควรใช้ความสามารถในการอ่านสคริปต์การผลิตขนาดใหญ่ควรย่อให้เล็กลง