//* JavaScript Bitwise Operations
//TODO:   Operation     Result      Same as       Result
//?       5 & 1     	1       	0101 & 0001	  0001  
//?       5 | 1     	5       	0101 | 0001   0101
//?       ~ 5       	10	        ~0101	      1010
//?       5 << 1    	10	        0101 << 1	  1010
//?       5 ^ 1	        4	        0101 ^ 0001	  0100
//?       5 >> 1	    2	        0101 >> 1	  0010
//?       5 >>> 1	    2	        0101 >>> 1	  0010

//* JavaScript Bitwise AND
//  เมื่อดำเนินการ AND ในคู่ของบิต จะส่งกลับ 1 หากทั้งสองบิตเป็น 1
//TODO:  1bit                 4bit
//TODO:  Operation	Result    Operation	    Result
//?      0 & 0  	0         1111 & 0000	0000
//?      0 & 1	    0         1111 & 0001	0001
//?      1 & 0	    0         1111 & 0010	0010
//?      1 & 1	    1         1111 & 0100	0100

//* JavaScript Bitwise OR
//  เมื่อดำเนินการตามบิต OR ในคู่ของบิต มันจะคืนค่า 1 หากบิตใดบิตหนึ่งเป็น 1
//TODO:  1bit                 4bit
//TODO:  Operation	Result    Operation	    Result
//?      0 | 0  	0         1111 | 0000	1111
//?      0 | 1	    1         1111 | 0001	1111
//?      1 | 0	    1         1111 | 0010	1111
//?      1 | 1	    1         1111 | 0100	1111

//* JavaScript Bitwise XOR
//  เมื่อดำเนินการ XOR ระดับบิตในคู่ของบิต มันจะคืนค่า 1 หากบิตแตกต่างกัน
//TODO:  1bit                 4bit
//TODO:  Operation	Result    Operation	    Result
//?      0 ^ 0  	0         1111 ^ 0000	1111
//?      0 ^ 1	    1         1111 ^ 0001	1110
//?      1 ^ 0	    1         1111 ^ 0010	1101
//?      1 ^ 1	    0         1111 ^ 0100	1011

//* JavaScript Bitwise AND (&)
//  Bitwise AND คืนค่า 1 ก็ต่อเมื่อทั้งสองบิตเป็น 1
//TODO: ทศนิยม    ไบนารี
//?     5         00000000000000000000000000000101
//?     1         00000000000000000000000000000001
//?     5 & 1     00000000000000000000000000000001 (1)
{
    let x = 5 & 1; //1
}

//* JavaScript Bitwise OR (|)
//  Bitwise OR คืนค่า 1 หากบิตใดบิตหนึ่งเป็น 1
//TODO: ทศนิยม    ไบนารี
//?     5         00000000000000000000000000000101
//?     1         00000000000000000000000000000001
//?     5 | 1     00000000000000000000000000000101 (5)
{
    let x = 5 | 1; //5
}

//* JavaScript Bitwise XOR (^)
//  Bitwise XOR ส่งคืน 1 หากบิตแตกต่างกัน
//TODO: ทศนิยม    ไบนารี
//?     5         00000000000000000000000000000101
//?     1         00000000000000000000000000000001
//?     5 ^ 1     00000000000000000000000000000100 (4)
{
    let x = 5 ^ 1; //4
}

//* JavaScript Bitwise NOT (~)
//TODO: ทศนิยม    ไบนารี
//?     5         00000000000000000000000000000101
//?     ~5        11111111111111111111111111111010 (-6)
{
    let x = ~5; //-6
}

//* JavaScript (Zero Fill) Bitwise Left Shift (<<)
//  นี่คือการเลื่อนซ้ายแบบเติมศูนย์ บิตศูนย์อย่างน้อยหนึ่งบิตถูกผลักเข้ามาจากทางขวา และบิตซ้ายสุดจะหลุดออก
//TODO: ทศนิยม    ไบนารี
//?     5         00000000000000000000000000000101
//?     5 << 1    00000000000000000000000000001010 (10)
{
    let x = 5 << 1; //10
}

//* JavaScript (Sign Preserving) Bitwise Right Shift (>>)
// นี่คือเครื่องหมายรักษากะขวา สำเนาของบิตซ้ายสุดถูกผลักเข้ามาจากทางซ้าย และบิตขวาสุดจะหลุดออก
//TODO: ทศนิยม    ไบนารี
//?     -5        11111111111111111111111111111011
//?     -5 >> 1   11111111111111111111111111111101 (-3)
{
    let x = -5 >> 1; //-3
}

//* JavaScript (Zero Fill) Right Shift (>>>)
//  นี่คือการเลื่อนไปทางขวาแบบเติมศูนย์ บิตศูนย์อย่างน้อยหนึ่งบิตถูกผลักเข้ามาจากทางซ้าย และบิตขวาสุดจะหลุดออก
//TODO: ทศนิยม    ไบนารี
//?     5         00000000000000000000000000000101
//?     5 >>> 1   00000000000000000000000000000010 (2)
{
    let x = 5 >>> 1; //2
}

//  การแปลงทศนิยมเป็นไบนารี
{
    function dec2bin(dec){
        return (dec >>> 0).toString(2);
    }
}

//  การแปลงไบนารีเป็นทศนิยม
{
    function bin2dec(bin){
        return parseInt(bin, 2).toString(10);
    }
}