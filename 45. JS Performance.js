//* JavaScript Performance
//  วิธีเพิ่มความเร็วโค้ด JavaScript ของคุณ

//* Reduce Activity in Loops ลดกิจกรรมในลูป
//  แต่ละคำสั่งในลูป รวมถึงคำสั่ง for จะถูกดำเนินการสำหรับการวนซ้ำแต่ละครั้ง
//  คำสั่งหรือการกำหนดที่สามารถวางไว้นอกลูปจะทำให้ลูปทำงานเร็วขึ้น
//! Bad
{
  for (let i = 0; i < arr.length; i++) {}
}

//* Good
{
  let l = arr.length;
  for (let i = 0; i < l; i++) {}
}
//  รหัสที่ไม่ถูกต้องเข้าถึงคุณสมบัติความยาวของอาร์เรย์ทุกครั้งที่วนซ้ำ
//  รหัสที่ดีกว่าจะเข้าถึงคุณสมบัติความยาวนอกลูปและทำให้ลูปทำงานเร็วขึ้น

//* ลดการเข้าถึง DOM
//  การเข้าถึง HTML DOM นั้นช้ามาก เมื่อเทียบกับคำสั่ง JavaScript อื่นๆ
//  หากคุณคาดว่าจะเข้าถึงองค์ประกอบ DOM หลายครั้ง ให้เข้าถึงเพียงครั้งเดียว และใช้เป็นตัวแปรในเครื่อง
{
  const obj = document.getElementById("demo");
  obj.innerHTML = "Hello";
}

//* ลดขนาด DOM
//  ทำให้จำนวนองค์ประกอบใน HTML DOM มีขนาดเล็ก
//  วิธีนี้จะปรับปรุงการโหลดหน้าเว็บอยู่เสมอ และเพิ่มความเร็วในการแสดงผล (การแสดงหน้าเว็บ) โดยเฉพาะอย่างยิ่งบนอุปกรณ์ขนาดเล็ก
//  ความพยายามในการค้นหา DOM ทุกครั้ง (เช่น getElementsByTagName) จะได้รับประโยชน์จาก DOM ที่มีขนาดเล็กลง

//* หลีกเลี่ยงตัวแปรที่ไม่จำเป็น
//  อย่าสร้างตัวแปรใหม่หากคุณไม่ได้วางแผนที่จะบันทึกค่า
//! Bad
{
  let fullName = firstName + " " + lastName;
  document.getElementById("demo").innerHTML = fullName;
}
//* Good
{
  document.getElementById("demo").innerHTML = firstName + " " + lastName;
}

//* Delay JavaScript Loading
//  การวางสคริปต์ของคุณที่ด้านล่างของเนื้อหาของหน้าจะทำให้เบราว์เซอร์โหลดหน้าก่อน
//  ขณะที่กำลังดาวน์โหลดสคริปต์ เบราว์เซอร์จะไม่เริ่มการดาวน์โหลดอื่นๆ นอกจากนี้ การแยกวิเคราะห์และกิจกรรมการแสดงผลทั้งหมดอาจถูกบล็อก
//? ข้อกำหนด HTTP กำหนดว่าเบราว์เซอร์ไม่ควรดาวน์โหลดมากกว่าสองคอมโพเนนต์พร้อมกัน
//? อีกทางเลือกหนึ่งคือใช้defer="true"ในแท็กสคริปต์ แอตทริบิวต์ defer ระบุว่าควรเรียกใช้สคริปต์หลังจากที่เพจแยกวิเคราะห์เสร็จแล้ว แต่จะใช้ได้กับสคริปต์ภายนอกเท่านั้น
//? หากเป็นไปได้ คุณสามารถเพิ่มสคริปต์ของคุณไปยังเพจด้วยโค้ด หลังจากที่โหลดเพจแล้ว
{
  window.onload = function () {
    const element = document.createElement("script");
    element.src = "myScript.js";
    document.body.appendChild(element);
  };
}

//* หลีกเลี่ยงการใช้ with
//  มันส่งผลเสียต่อความเร็ว นอกจากนี้ยังทำให้ขอบเขต JavaScript ยุ่งเหยิง
//  ไม่อนุญาตให้ใช้คีย์เวิร์ด with ในโหมดเข้มงวด